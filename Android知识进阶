1.Application中的Context和Activity中的Context区别

Application的Context是一个全局静态变量，SDK的说明是只有当你引用这个context的生命周期超过了当前activity的生命周期，而和整个

应用的生命周期挂钩时，才去使用这个application的context。

一种推荐的用法就是应用程序注册广播broadcast时，使用这个context。

引用application context并不会导致内存泄漏。引用activity的context才会导致内存泄漏，当你的引用对象的生命周期超过了当前

activity的生命周期时，系统回收你的activity时发现还有一个context的强引用，而不去销毁这个activity，导致内存泄漏，在开发过程中

，需要非常重视这点（一个全局静态变量在引用context时一定要使用application的Context， 而不要使用activity的)

 避免context相关的内存泄露，记住以下几点： 
（1）. 不要让生命周期长的对象引用activity context，即保证引用activity的对象要与activity本身生命周期是一样的 
（2）. 对于生命周期长的对象，可以使用application context 
（3）. 避免非静态的内部类，尽量使用静态类，避免生命周期问题，注意内部类对外部对象引用导致的生命周期变化

2.Eventbus源码解析

register：
扫描了所有的方法，把匹配的方法最终保存在subscriptionsByEventType（Map，key：eventType ； 
value：CopyOnWriteArrayList<Subscription> ）中；
eventType是我们方法参数的Class，Subscription中则保存着subscriber, subscriberMethod（method, threadMode, eventType）,
priority；包含了执行改方法所需的一切。
可以说，就是在一个单例内部维持着一个map对象存储了一堆的方法；post无非就是根据参数去查找方法，进行反射调用。

3.获取屏幕的宽高，通知栏的高度。

     //获取屏幕的宽度
     DisplayMetrics dm = new DisplayMetrics();
     getWindowManager().getDefaultDisplay().getMetrics(dm);
     int screenWidth = dm.widthPixels;
     int screenHeight = dm.heightPixels;
     
     /**
       * 获取状态栏高度——方法
       * */
        int statusBarHeight = -1;
        //获取status_bar_height资源的ID
        int resourceId = getResources().getIdentifier("status_bar_height", "dimen", "android");
        if (resourceId > 0) {
            //根据资源ID获取响应的尺寸值
            statusBarHeight = getResources().getDimensionPixelSize(resourceId);
        }

4.属性动画和补间动画的常用功能的总结 

  http://www.jianshu.com/p/ec62b81df7ed 
  
  当时做那个平移的属性动画，就把我折磨的不行，主要是斜着移动，完美解决！
  
   ObjectAnimator animator1 = ObjectAnimator.ofFloat(mImageView, "translationX", 0f,200f);
    ObjectAnimator animator2 = ObjectAnimator.ofFloat(mImageView, "translationY", 0f,200f);
    ObjectAnimator animator3 = ObjectAnimator.ofFloat(mImageView, "rotation", 0f,360f);
    AnimatorSet set = new AnimatorSet();
    set.play(animator1).with(animator2);
    set.play(animator3).after(animator1);
    set.setDuration(1000).start();
